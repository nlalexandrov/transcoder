; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=yes
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
;autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on https://issues.asterisk.org. We have made good progress in providing
; something compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
;#include filename.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]

;
; WARNING WARNING WARNING WARNING
; If you load any other extension configuration engine, such as pbx_ael.so,
; your global variables may be overridden by that file.  Please take care to
; use only one location to set global variables, and you will likely save
; yourself a ton of grief.
; WARNING WARNING WARNING WARNING
;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example, the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must always start
; with 1 to be considered a valid extension.  The priority "next" or "n" means
; the previous priority plus one, regardless of whether the previous priority
; was associated with the current extension or not.  The priority "same" or "s"
; means the same as the previously specified priority, again regardless of
; whether the previous entry was for the same extension.  Priorities may be
; immediately followed by a plus sign and another integer to add that amount
; (most useful with 's' or 'n').  Priorities may then also have an alias, or
; label, in parentheses after their name which can be used in goto situations.
;
; Contexts contain several lines, one for each step of each extension.  One may
; include another context in the current one as well, optionally with a date
; and time.  Included contexts are included in the order they are listed.
; Switches may also be included within a context.  The order of matching within
; a context is always exact extensions, pattern match extensions, includes, and
; switches.  Includes are always processed depth-first.  So for example, if you
; would like a switch "A" to match before context "B", simply put switch "A" in
; an included context "C", where "C" is included in your original context
; before "B".
;
;[context]
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;
; Timing list for includes is
;
;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;include => daytime,9:00-17:00,mon-fri,*,*
;include => weekend,*,sat-sun,*,*
;include => weeknights,17:02-8:58,mon-fri,*,*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon receipt
; of a particular pattern.  The most commonly used example is of course '9'
; like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.  Please note that ignorepat
; only works with channels which receive dialtone from the PBX, such as DAHDI,
; Phone, and VPB.  Other channels, such as SIP and MGCP, which generate their
; own dialtone and converse with the PBX only after a number is complete, are
; generally unaffected by ignorepat (unless DISA or another method is used to
; generate a dialtone after answering the channel).
;

[transcoder]

exten => 102,1,Noop("Forwarding to transcoder")
exten => 102,2,Dial(SIP/102@192.168.88.233:5061)

exten => h,n,Hangup()
exten => t,n,Hangup()
exten => i,n,Hangup()


[default]

    exten => s,1,Hangup()
    exten => _X.,1,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()

[from-kamailio]


    exten => _X.,1,set(CDR(callid)=${SIPCALLID})
    exten => _X.,n,set(CDR(host)=${SYSTEMNAME})
    exten => _X.,n,set(CDR(src_ip)=${SIP_HEADER(x-bill-src_ip)})

;    exten => _X.,n,Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}--${EXTEN})
;    exten => _X.,n,Monitor(wav,${CALLFILENAME},m)

    exten => _X.,n,NoOP(x-bill-route:${SIP_HEADER(x-bill-route)})
    exten => _X.,n,gotoif($[ "${SIP_HEADER(x-bill-route)}" = "decline" ]?header-decline,${EXTEN},1)
    exten => _X.,n,gotoif($[ "${SIP_HEADER(x-bill-route)}" = "play" ]?header-play,${EXTEN},1)
    exten => _X.,n,gotoif($[ "${SIP_HEADER(x-bill-route)}" = "redirect" ]?header-redirect,${EXTEN},1)
    exten => _X.,n,gotoif($[ "${SIP_HEADER(x-bill-route)}" = "agi" ]?header-agi,${EXTEN},1)
    exten => _X.,n,gotoif($[ "${SIP_HEADER(x-bill-route)}" = "goto" ]?header-goto,${EXTEN},1)


    exten => _X.,n,AGI(play_ivr.php)
    exten => _X.,n,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()


[from-redirect]

    exten => _X.,1,set(CDR(callid)=${SIPCALLID})
    exten => _X.,n,set(CDR(host)=${SYSTEMNAME})
    exten => _X.,n,set(CDR(src_ip)=${SIP_HEADER(x-bill-src_ip)})

;    exten => _X.,n,Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}--${EXTEN})
;    exten => _X.,n,Monitor(wav,${CALLFILENAME},m)

    exten => _X.,n,Answer()
    exten => _X.,n,Playback(tt-weasels)
    exten => _X.,n,Playback(/home/srv/ivr/upload/0/20110512_1921)
    exten => _X.,n,Playback(/home/srv/ivr/upload/0/20110523_1859)
    exten => _X.,n,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()




[header-decline]
    exten => _X.,1,noop(Got into header-decline)

    exten => _X.,n,Set(TIMEOUT(absolute)=${RAND(3600,3660)})

    exten => _X.,n,NoOP(header=<${SIP_HEADER(x-bill-decline)}>)

    exten => _X.,n,Set(playlist=${SIP_HEADER(x-bill-decline)})
    exten => _X.,n,Set(playlist=${CUT(playlist,\,,1)})
    exten => _X.,n,Set(playlist=${CUT(playlist,.,1)})
    exten => _X.,n,NoOP(playlist=<${playlist}>)

    ;;exten => _X.,n,NoOP(/home/srv/ivr/upload/${playfile})
    ;;exten => _X.,n,NoOP(filecheck=${STAT(e,/home/srv/ivr/upload/${playfile})}-)

    exten => _X.,n(decline),Playback(${IF($[${STAT(e,/home/srv/ivr/upload/${playlist}.ul)}]?/home/srv/ivr/upload/${playlist}:/home/srv/ivr/upload/0/limit_0_error)})
    exten => _X.,n,Goto(decline)

    exten => _X.,n,Hangup()


    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()




[header-play]
    exten => _X.,1,noop(Got into header-play)
    exten => _X.,n,NoOP(Set TIMEOUT from ${SIP_HEADER(x-bill-maxmincall)} to ${SIP_HEADER(x-bill-maxmincall_to)})
    exten => _X.,n,Set(TIMEOUT(absolute)=${RAND(${SIP_HEADER(x-bill-maxmincall)},${SIP_HEADER(x-bill-maxmincall_to)})})

    exten => _X.,n,Set(playlist=${SIP_HEADER(x-bill-playlist)})
    ;vzemam purviq fajl ot spisuka
    exten => _X.,n,Set(playlist=${CUT(playlist,\,,1)})
    ;maham razshitenieto
    exten => _X.,n,Set(playlist=${CUT(playlist,.,1)})
    exten => _X.,n,NoOP(playlist=<${playlist}>)

    exten => _X.,n,Set(playlistdefault=${SIP_HEADER(x-bill-playlist-default)})
    exten => _X.,n,Set(playlistdefault=${CUT(playlistdefault,\,,1)})
    exten => _X.,n,Set(playlistdefault=${CUT(playlistdefault,.,1)})
    exten => _X.,n,NoOP(playlistdefault=<${playlistdefault}>)

    exten => _X.,n(play),set(i=0)
    ;exten => _X.,n,Set(playfilecount=${SIP_HEADER(x-bill-play-cnt)})
    exten => _X.,n,set(playfilecount=1000)

    exten => _X.,n,while($[${i} < ${playfilecount}])

    exten => _X.,n,Playback(${IF($[${STAT(e,/home/srv/ivr/upload/${playlist}.ul)}]?/home/srv/ivr/upload/${playlist}:/home/srv/ivr/upload/${playlistdefault})})
    ;;exten => _X.,n,Playback("/usr/share/asterisk/sounds/en_US_f_Allison/tt-weasels")
    exten => _X.,n,set(i=$[${i}+1])

    exten => _X.,n,EndWhile()

    exten => _X.,n,Goto(play)
    exten => _X.,n,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()







[header-redirect]
    exten => _X.,1,noop(Got into header-redirect)

    exten => _X.,n,NoOP(Set TIMEOUT from ${SIP_HEADER(x-bill-maxmincall)} to ${SIP_HEADER(x-bill-maxmincall_to)})
    exten => _X.,n,Set(TIMEOUT(absolute)=${RAND(${SIP_HEADER(x-bill-maxmincall)},${SIP_HEADER(x-bill-maxmincall_to)})})

    exten => _X.,n,Set(hostlist=${SIP_HEADER(x-bill-redir)})

    ;exten => _X.,n,ExecIf($["${CUT(hostlist,\;,1)}" != ""]?Dial(SIP/${EXTEN}@${CUT(hostlist,\;,1)}) )
    ;exten => _X.,n,ExecIf($["${CUT(hostlist,\;,2)}" != ""]?Dial(SIP/${EXTEN}@${CUT(hostlist,\;,2)}) )


    exten => _X.,n,Set(nomer=${EXTEN})
    exten => _X.,n,Set(i=1)

    exten => _X.,n(dial),ExecIf($[${i} > 10]?Hangup() )
    exten => _X.,n,Set(peer=${CUT(hostlist,\;,${i})})
    exten => _X.,n,Set(ip=${CUT(peer,\@,2)})
    exten => _X.,n,ExecIf($["${peer}" = ""]?Hangup() )
    exten => _X.,n,set(CDR(dst_ip)=${ip})
    exten => _X.,n,SIPAddHeader(x-bill-route:redirect)
    exten => _X.,n,SIPAddHeader(x-bill-redir:${peer})
    exten => _X.,n,Dial(SIP/${EXTEN}@${CHANNEL(recvip)},80)
;    exten => _X.,n,Dial(SIP/${nomer}@${peer},80)
    exten => _X.,n,Goto(s-${DIALSTATUS},1)
    exten => _X.,n,Hangup()

    exten => s-BUSY,1,Hangup()
    exten => s-NOANSWER,1,Hangup()
    exten => s-HANGUP,1,Hangup()

    exten => s-CANCEL,1,Set(i=$[${i}+1])
    exten => s-CANCEL,n,Set(CDR(dst_failed)=${IF($[ "${CDR(dst_failed)}" != "" ]?${CDR(dst_failed)},${peer}:${peer})})
    exten => s-CANCEL,n,Goto(${nomer},dial)

    exten => s-CHANUNAVAIL,1,Set(i=$[${i}+1])
    exten => s-CHANUNAVAIL,n,Set(CDR(dst_failed)=${IF($[ "${CDR(dst_failed)}" != "" ]?${CDR(dst_failed)},${peer}:${peer})})
    exten => s-CHANUNAVAIL,n,Goto(${nomer},dial)

    exten => s-CONGESTION,1,Set(i=$[${i}+1])
    exten => s-CONGESTION,n,Set(CDR(dst_failed)=${IF($[ "${CDR(dst_failed)}" != "" ]?${CDR(dst_failed)},${peer}:${peer})})
    exten => s-CONGESTION,n,Goto(${nomer},dial)


    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()


[header-agi]
    exten => _X.,1,noop(Got into header-agi)
    exten => _X.,n,Set(agifile=${SIP_HEADER(x-bill-agi-exec)})
    exten => _X.,n,agi(${agifile})
    exten => _X.,n,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()



[header-goto]
; tova zasto mi izglejda siakash setva promenlivi no ne "otiva" nikude ?
    exten => _X.,1,noop(header-goto)
    exten => _X.,n,Set(header-gotocontext=${SIP_HEADER(x-bill-goto-context)})
    exten => _X.,n,Set(header-gotoext=${SIP_HEADER(x-bill-goto-ext)})
    exten => _X.,n,Set(header-gotoprio=${SIP_HEADER(x-bill-goto-prio)})

    exten => _X.,n,noop(${SIP_HEADER(x-bill-goto-context)})
    exten => _X.,n,Hangup()

    exten => h,n,Hangup()
    exten => t,n,Hangup()
    exten => i,n,Hangup()


;[adult]
;exten => s,1,Noop(Switching to pgsql)
;switch => Realtime
;[adult]
;exten => s,1,Noop(Switching to PGSQL)

;switch => Realtime



[adult]
switch => Realtime

[intro]
switch => Realtime

[cat]
switch => Realtime

[blowjob1]
switch => Realtime

[blowjob11]
switch => Realtime

[afterstoryb1]
switch => Realtime

[blowjob2]
switch => Realtime

[blowjob22]
switch => Realtime

[afterstoryb2]
switch => Realtime

[blowjob3]
switch => Realtime

[blowjob33]
switch => Realtime

[afterstoryb3]
switch => Realtime

[blowjob4]
switch => Realtime

[blowjob44]
switch => Realtime

[afterstoryb4]
switch => Realtime

[blowjob5]
switch => Realtime

[blowjob55]
switch => Realtime

[afterstoryb5]
switch => Realtime

[couples1]
switch => Realtime

[couples11]
switch => Realtime

[afterstoryc1]
switch => Realtime

[couples2]
switch => Realtime

[couples22]
switch => Realtime

[afterstoryc2]
switch => Realtime

[couples3]
switch => Realtime

[couples33]
switch => Realtime

[afterstoryc3]
switch => Realtime

[couples4]
switch => Realtime

[couples44]
switch => Realtime

[afterstoryc4]
switch => Realtime

[couples5]
switch => Realtime

[couples55]
switch => Realtime

[afterstoryc5]
switch => Realtime

[couples6]
switch => Realtime

[couples66]
switch => Realtime

[afterstoryc6]
switch => Realtime

[dildostoys1]
switch => Realtime

[dildostoys11]
switch => Realtime

[afterstoryd1]
switch => Realtime

[dildostoys2]
switch => Realtime

[dildostoys22]
switch => Realtime

[afterstoryd2]
switch => Realtime

[dildostoys3]
switch => Realtime

[dildostoys33]
switch => Realtime

[afterstoryd3]
switch => Realtime

[dildostoys4]
switch => Realtime

[dildostoys44]
switch => Realtime

[afterstoryd4]
switch => Realtime

[dildostoys5]
switch => Realtime

[dildostoys55]
switch => Realtime

[afterstoryd5]
switch => Realtime

[dildostoys6]
switch => Realtime

[dildostoys66]
switch => Realtime

[afterstoryd6]
switch => Realtime

[dildostoys7]
switch => Realtime

[dildostoys77]
switch => Realtime

[afterstoryd7]
switch => Realtime

[fantasy1]
switch => Realtime

[fantasy11]
switch => Realtime

[afterstoryf1]
switch => Realtime

[fantasy2]
switch => Realtime

[fantasy22]
switch => Realtime

[afterstoryf2]
switch => Realtime

[fantasy3]
switch => Realtime

[fantasy33]
switch => Realtime

[afterstoryf3]
switch => Realtime

[fantasy4]
switch => Realtime

[fantasy44]
switch => Realtime

[afterstoryf4]
switch => Realtime

[fantasy5]
switch => Realtime

[fantasy55]
switch => Realtime

[afterstoryf5]
switch => Realtime

[fantasy6]
switch => Realtime

[fantasy66]
switch => Realtime

[afterstoryf6]
switch => Realtime

[masturbation1]
switch => Realtime

[masturbation11]
switch => Realtime

[afterstorym1]
switch => Realtime

[masturbation2]
switch => Realtime

[masturbation22]
switch => Realtime

[afterstorym2]
switch => Realtime

[masturbation3]
switch => Realtime

[masturbation33]
switch => Realtime

[afterstorym3]
switch => Realtime

[masturbation4]
switch => Realtime

[masturbation44]
switch => Realtime

[afterstorym4]
switch => Realtime

[masturbation5]
switch => Realtime

[masturbation55]
switch => Realtime

[afterstorym5]
switch => Realtime

[orgasms1]
switch => Realtime

[orgasms11]
switch => Realtime

[afterstoryo1]
switch => Realtime

[orgasms2]
switch => Realtime

[orgasms22]
switch => Realtime

[afterstoryo2]
switch => Realtime

[orgasms3]
switch => Realtime

[orgasms33]
switch => Realtime

[afterstoryo3]
switch => Realtime

[orgasms4]
switch => Realtime

[orgasms44]
switch => Realtime

[afterstoryo4]
switch => Realtime

[orgasms5]
switch => Realtime

[orgasms55]
switch => Realtime

[afterstoryo5]
switch => Realtime

[orgasms6]
switch => Realtime

[orgasms66]
switch => Realtime

[afterstoryo6]
switch => Realtime

[squirting1]
switch => Realtime

[squirting11]
switch => Realtime

[afterstorys1]
switch => Realtime

[squirting2]
switch => Realtime

[squirting22]
switch => Realtime

[afterstorys2]
switch => Realtime

[squirting3]
switch => Realtime

[squirting33]
switch => Realtime

[afterstorys3]
switch => Realtime

[squirting4]
switch => Realtime

[squirting44]
switch => Realtime

[afterstorys4]
switch => Realtime

[teens1]
switch => Realtime

[teens11]
switch => Realtime

[afterstoryt1]
switch => Realtime

[teens2]
switch => Realtime

[teens22]
switch => Realtime

[afterstoryt2]
switch => Realtime

[teens3]
switch => Realtime

[teens33]
switch => Realtime

[afterstoryt3]
switch => Realtime

[teens4]
switch => Realtime

[teen-s4_4]
switch => Realtime

[afterst-oryt4]
switch => Realtime


